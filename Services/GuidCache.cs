// App1Simulation/Services/GuidCache.cs
using System.Collections.Concurrent;

namespace App1Simulation.Services
{
    // This static class acts as a simple in-memory cache for GUIDs generated by App1.
    // In a real-world scenario, this would typically be a distributed cache (e.g., Redis)
    // or a database, allowing multiple App1 instances to share validation state.
    public static class GuidCache
    {
        // ConcurrentDictionary is thread-safe for adding/retrieving GUIDs.
        // Key: GUID string, Value: UserName string (associated with the GUID)
        private static readonly ConcurrentDictionary<string, string> _validGuids = new ConcurrentDictionary<string, string>();

        /// <summary>
        /// Adds a new GUID and its associated username to the cache.
        /// This is called when a user successfully logs into App1.
        /// </summary>
        /// <param name="guid">The GUID to add.</param>
        /// <param name="userName">The username associated with the GUID.</param>
        public static void AddGuid(string guid, string userName)
        {
            _validGuids[guid] = userName;
            Console.WriteLine($"[GuidCache] Added GUID: {guid} for User: {userName}");
        }

        /// <summary>
        /// Attempts to retrieve a username for a given GUID from the cache.
        /// This is called by App1's API to validate a GUID received from App2.
        /// </summary>
        /// <param name="guid">The GUID to lookup.</param>
        /// <param name="userName">Output parameter for the associated username.</param>
        /// <returns>True if the GUID was found, false otherwise.</returns>
        public static bool TryGetValue(string guid, out string userName)
        {
            return _validGuids.TryGetValue(guid, out userName);
        }

        /// <summary>
        /// Removes a GUID from the cache.
        /// In a real system, GUIDs should be removed after first use or expiry to prevent replay attacks.
        /// </summary>
        /// <param name="guid">The GUID to remove.</param>
        public static void RemoveGuid(string guid)
        {
            _validGuids.TryRemove(guid, out _);
            Console.WriteLine($"[GuidCache] Removed GUID: {guid}");
        }

        /// <summary>
        /// For debugging: Clears all GUIDs from the cache.
        /// </summary>
        public static void ClearAllGuids()
        {
            _validGuids.Clear();
            Console.WriteLine($"[GuidCache] All GUIDs cleared.");
        }
    }
}
